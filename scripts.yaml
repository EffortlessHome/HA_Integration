send_notifications_to_nspanel_and_thermostats:
  alias: Send Notifications to NSPanel and Thermostats
  sequence:
  - service: esphome.nspanel_notification_show
    metadata: {}
    data:
      message: test notification
  - service: notify.send_message
    target:
      device_id:
      - 908c89d83967b161590bbb0587adcbaa
      - e64ea0f6859308b2a4dcd4637df71e98
    data:
      message: test notification
  mode: single
'1717102247198':
  alias: EH Set Guest Door Code (Z2M)
  use_blueprint:
    path: effortlesshome/EH_SetDoorLockCode.yaml
    input:
      lock:
        entity_id: lock.doorlock
      slot: '5'
      code: '7777'
      duration:
        hours: 1
        minutes: 0
        seconds: 0
        days: 0
test_fading_main_floor_lights:
  alias: Test Fading Main Floor Lights
  sequence:
  - service: light.turn_on
    metadata: {}
    data:
      transition: 220
      color_temp: 423
      brightness_pct: 68
    target:
      entity_id: light.main_floor_lights
  mode: single
clear_login_token_for_guest_user:
  alias: 'Clear Login Token For Guest User '
  sequence:
  - service: login_control.clear_refresh_tokens
    data:
      user_id: 44190e390b6549298836dbfa42aba706
  description: Use with change password to prevent access if already logged in
alarm_triggered:
  alias: Alarm Triggered
  sequence:
  - service: siren.turn_on
    target:
      entity_id: siren.doorbell_camera_siren
    data: {}
    enabled: false
  - service: tts.speak
    metadata: {}
    data:
      cache: true
      message: The Security Alarm Has Been Triggered. Disarm within the next 30 seconds
        to prevent security company notification.
      media_player_entity_id: media_player.all_speakers_group
    target:
      entity_id: tts.google_en_com
    enabled: false
  - service: light.turn_on
    metadata: {}
    data: {}
    target:
      entity_id:
      - light.main_floor_lights
      - light.all_outside_lights
    enabled: false
  - delay:
      hours: 0
      minutes: 0
      seconds: 45
      milliseconds: 0
    enabled: true
  - service: script.notify_security_monitoring_company
    data: {}
  mode: single
  icon: mdi:alarm-light
run_goodnight_automation:
  alias: Run The GoodNight Automation
  sequence:
  - service: automation.trigger
    metadata: {}
    data:
      skip_condition: false
    target:
      entity_id: automation.goodnight
  mode: single
run_the_arrive_home_automation:
  alias: Run The Arrive Home Automation
  sequence:
  - service: automation.trigger
    metadata: {}
    data:
      skip_condition: false
    target:
      entity_id: automation.arrive_home_test
  mode: single
run_the_leave_home_automation:
  alias: Run The Leave Home Automation
  sequence:
  - service: automation.trigger
    metadata: {}
    data:
      skip_condition: false
    target:
      entity_id: automation.leave_home
  mode: single
reload_automations:
  alias: Reload Automations
  sequence:
  - service: automation.reload
    metadata: {}
    data: {}
  mode: single
set_doorlock_keycodes:
  alias: Set Doorlock Keycodes
  sequence:
  - service: mqtt.publish
    data:
      topic: zigbee2mqtt/doorlock/set
      payload: '{"pin_code": {"user": "10", "user_type": "unrestricted", "user_enabled":
        "true", "pin_code": "{{ states(''input_text.ownerslockcode_pin'') }}"}}'
  - service: mqtt.publish
    data:
      topic: zigbee2mqtt/doorlock/set
      payload: '{"pin_code": {"user": "15", "user_type": "unrestricted", "user_enabled":
        "true", "pin_code": "{{ states(''input_text.templockcode_pin'') }}"}}'
  - service: mqtt.publish
    data:
      topic: zigbee2mqtt/doorlock/set
      payload: '{"pin_code": {"user": "16", "user_type": "unrestricted", "user_enabled":
        "true", "pin_code": "{{ states(''input_text.currentrenterpincode'') }}"}}'
  mode: single
  icon: mdi:lock-smart
notify_security_monitoring_company:
  alias: Notify Security Monitoring Company
  sequence:
  - condition: state
    entity_id: alarm_control_panel.alarm1_2
    state: triggered
    enabled: false
  - service: rest_command.get_customer_info
    metadata: {}
    response_variable: customer_response_var
    data: {}
  - service: rest_command.get_system_info
    response_variable: system_response_var
    data: {}
  - alias: Parse data
    variables:
      systemresponse: '{{ system_response_var.content.results[0] }}'
      customerresponse: '{{ customer_response_var.content.results[0] }}'
      fullname: '{{ customerresponse.fullname }}'
      phonenumber: '{{ customerresponse.phonenumber }}'
      address_json: '{{ systemresponse.address_json }}'
      alarm_pin: '{{ systemresponse.alarmpin }}'
  - service: input_text.set_value
    metadata: {}
    data:
      value: '{{ alarm_pin }}'
    target:
      entity_id: input_text.homeowner_alarm_pin
  - service: rest_command.create_alarm
    metadata: {}
    data:
      customer_name: '{{ fullname  }}'
      customer_phone: '{{ phonenumber }}'
      alarm_pin: '{{ alarm_pin  }}'
      address_json: '{{ address_json }}'
    response_variable: response_var
  - if:
    - condition: template
      value_template: '{{ response_var[''status''] == 201 }}'
    then:
    - alias: Parse data
      variables:
        responsecontent: '{{ response_var[''content''] }}'
        alarm_id: '{{ responsecontent[''id''] }}'
        alarm_owner: '{{ responsecontent[''owner_id''] }}'
        got_errors: '{{ responsecontent[''id''] == ''0'' }}'
        status: '{{ responsecontent[''status''] }}'
        event_type: '{{ responsecontent[''event_type''] }}'
        event_time: '{{ responsecontent[''event_time''] }}'
    - service: rest_command.save_alarm_record
      metadata: {}
      data:
        alarm_id: '{{ alarm_id  }}'
      response_variable: responsevar2
    - if:
      - condition: template
        value_template: '{{ got_errors }}'
      then:
      - service: notify.notify
        data:
          title: Monitoring Service Notification Errors
          message: '{{ responsecontent[''status''] }}'
      else:
      - service: input_text.set_value
        metadata: {}
        data:
          value: '{{ alarm_id }}'
        target:
          entity_id: input_text.latest_alarm_id
      - service: input_text.set_value
        metadata: {}
        data:
          value: '{{ status }}'
        target:
          entity_id: input_text.latestalarmstatus
      - service: input_text.set_value
        metadata: {}
        data:
          value: '{{ alarm_owner }}'
        target:
          entity_id: input_text.latest_alarm_owner
      - service: input_text.set_value
        metadata: {}
        data:
          value: '{{ event_type }}'
        target:
          entity_id: input_text.lastalarmeventtype
      - service: input_text.set_value
        metadata: {}
        data:
          value: '{{ event_time }}'
        target:
          entity_id: input_text.lastalarmeventtime
      - service: notify.notify
        data:
          title: Monitoring Service Notified
          message: 'This is the alarm id: {{ alarm_id }} and this is the alarm owner
            id: {{ alarm_owner }}'
      - service: script.create_motion_sensor_alarm_event
        metadata: {}
        data: {}
      - service: script.create_smoke_alarm_triggered_event
        metadata: {}
        data: {}
      - service: script.1717536335572
        metadata: {}
        data: {}
      - service: script.create_motion_sensor_alarm_event
        metadata: {}
        data: {}
      - service: script.create_motion_sensor_alarm_event_2
        data: {}
      - service: script.create_lock_alarm_triggered_event
        metadata: {}
        data: {}
        enabled: true
    else:
    - service: notify.notify
      data:
        title: Could not reach Monitoring Service
        message: 'HTTP code: {{ response_var[''returncode''] }} and Status: {{ response_var[''status'']
          }}'
  mode: single
cancel_security_alarm:
  alias: Cancel Security Alarm
  sequence:
  - service: rest_command.update_alarm
    metadata: {}
    data:
      alarm_id: '{{ states(''input_text.latest_alarm_id'')  }}'
      status: CANCELED
      pin: '{{ states(''input_text.homeowner_alarm_pin'')  }}'
    response_variable: response_var
  - if:
    - condition: template
      value_template: '{{ response_var[''status''] == 201 }}'
    then:
    - alias: Parse data
      variables:
        responsecontent: '{{ response_var[''content''] }}'
        status: '{{ responsecontent[''status''] }}'
        event_type: '{{ responsecontent[''event_type''] }}'
        event_time: '{{ responsecontent[''event_time''] }}'
    - service: input_text.set_value
      metadata: {}
      data:
        value: '{{ status }}'
      target:
        entity_id: input_text.latestalarmstatus
    - service: input_text.set_value
      metadata: {}
      data:
        value: '{{ event_type }}'
      target:
        entity_id: input_text.lastalarmeventtype
      enabled: false
    - service: input_text.set_value
      metadata: {}
      data:
        value: '{{ event_time }}'
      target:
        entity_id: input_text.lastalarmeventtime
      enabled: false
    - service: notify.notify
      data:
        title: Security Alarm Updated
        message: 'New Status: {{ status }}'
    else:
    - service: notify.notify
      data:
        title: Could not reach Monitoring Service to cancel security alarm
        message: 'HTTP code: {{ response_var[''returncode''] }} and Status: {{ response_var[''status'']
          }}'
  mode: single
get_latest_security_alarm_status:
  alias: Get Latest Security Alarm Status
  sequence:
  - service: rest_command.get_alarm_status
    metadata: {}
    data:
      alarm_id: '{{ states(''input_text.latest_alarm_id'')  }}'
      alarmid: '{{ states(''input_text.latest_alarm_id'')  }}'
    response_variable: response_var
  - if:
    - condition: template
      value_template: '{{ response_var[''status''] == 200 }}'
    then:
    - alias: Parse data
      variables:
        responsecontent: '{{ response_var[''content''] }}'
        status: '{{ responsecontent[''status''] }}'
        event_type: '{{ responsecontent[''event_type''] }}'
        event_time: '{{ responsecontent[''event_time''] }}'
    - service: input_text.set_value
      metadata: {}
      data:
        value: '{{ status }}'
      target:
        entity_id: input_text.latestalarmstatus
    - service: input_text.set_value
      metadata: {}
      data:
        value: '{{ event_type }}'
      target:
        entity_id: input_text.lastalarmeventtype
      enabled: false
    - service: input_text.set_value
      metadata: {}
      data:
        value: '{{ event_time }}'
      target:
        entity_id: input_text.lastalarmeventtime
      enabled: false
    else:
    - service: notify.notify
      data:
        title: Could not reach Monitoring Service to get latest alarm status
        message: 'HTTP code: {{ response_var[''returncode''] }} and Status: {{ response_var[''status'']
          }}'
      enabled: false
  mode: single
'1717536335572':
  alias: Create Contact Sensor Alarm Event
  sequence:
  - condition: state
    entity_id: binary_sensor.doorsensors
    state: 'on'
  - service: rest_command.alarm_create_contactsensor_event
    metadata: {}
    data:
      alarm_id: '{{ states(''input_text.latest_alarm_id'')  }}'
      device_attribute: contact
      device_value: open
      device_id: contact sensor
      device_model: contact sensor
      device_name: contact sensor
      device_manufacturer: unknown
      event_time: '{{ now() }}'
    response_variable: response_var
  - if:
    - condition: template
      value_template: '{{ response_var[''status''] == 200 }}'
    then:
    - alias: Parse data
      variables:
        responsecontent: '{{ response_var[''content''] }}'
    else:
    - service: notify.notify
      data:
        title: Could not create alarm event for door/window contact sensor
        message: 'HTTP code: {{ response_var[''returncode''] }} and Status: {{ response_var[''status'']
          }}'
  mode: single
create_lock_alarm_triggered_event:
  alias: Create Lock Alarm Triggered Event
  sequence:
  - condition: state
    entity_id: lock.alllocks
    state: unlocked
  - service: rest_command.alarm_create_lock_event
    metadata: {}
    data:
      alarm_id: '{{ states(''input_text.latest_alarm_id'')  }}'
      device_id: doorlock
      device_model: doorlock
      device_name: doorlock
      device_manufacturer: unknown
      event_time: '{{ now() }}'
    response_variable: response_var
  - if:
    - condition: template
      value_template: '{{ response_var[''status''] == 200 }}'
    then:
    - alias: Parse data
      variables:
        responsecontent: '{{ response_var[''content''] }}'
    else:
    - service: notify.notify
      data:
        title: Could not create an alarm triggered event for the doorlock
        message: 'HTTP code: {{ response_var[''returncode''] }} and Status: {{ response_var[''status'']
          }}'
  mode: single
create_motion_sensor_alarm_event:
  alias: Create Freeze Sensor Alarm Event
  sequence:
  - condition: state
    entity_id: sensor.freeze_sensor
    state: 'on'
  - service: rest_command.alarm_create_freeze_event
    metadata: {}
    data:
      alarm_id: '{{ states(''input_text.latest_alarm_id'')  }}'
      device_attribute: freeze
      device_value: detected
      device_id: temperature sensor
      device_model: temperature sensor
      device_name: temperature sensor
      device_manufacturer: unknown
      event_time: '{{ now() }}'
    response_variable: response_var
  - if:
    - condition: template
      value_template: '{{ response_var[''status''] == 200 }}'
    then:
    - alias: Parse data
      variables:
        responsecontent: '{{ response_var[''content''] }}'
    else:
    - service: notify.notify
      data:
        title: Could not create alarm event for freeze sensor
        message: 'HTTP code: {{ response_var[''returncode''] }} and Status: {{ response_var[''status'']
          }}'
  mode: single
  description: ''
create_smoke_alarm_triggered_event:
  alias: Create Smoke Alarm Triggered Event
  sequence:
  - condition: state
    entity_id: binary_sensor.smokealarms
    state: 'on'
  - service: rest_command.alarm_create_smoke_event
    metadata: {}
    data:
      alarm_id: '{{ states(''input_text.latest_alarm_id'')  }}'
      device_attribute: smoke
      device_value: detected
      device_id: smoke alarm
      device_model: smoke alarm
      device_name: smoke alarm
      device_manufacturer: unknown
      event_time: '{{ now() }}'
    response_variable: response_var
  - if:
    - condition: template
      value_template: '{{ response_var[''status''] == 200 }}'
    then:
    - alias: Parse data
      variables:
        responsecontent: '{{ response_var[''content''] }}'
    else:
    - service: notify.notify
      data:
        title: Could not create an alarm triggered event for the Smoke Alarms
        message: 'HTTP code: {{ response_var[''returncode''] }} and Status: {{ response_var[''status'']
          }}'
  mode: single
create_motion_sensor_alarm_event_2:
  alias: Create Motion Sensor Alarm Event
  sequence:
  - condition: state
    entity_id: binary_sensor.motionsensors
    state: 'on'
  - service: rest_command.alarm_create_motion_event
    metadata: {}
    data:
      alarm_id: '{{ states(''input_text.latest_alarm_id'')  }}'
      device_attribute: motion
      device_value: detected
      device_id: motionsensor
      device_model: motionsensor
      device_name: motionsensor
      device_manufacturer: unknown
      event_time: '{{ now() }}'
    response_variable: response_var
  - if:
    - condition: template
      value_template: '{{ response_var[''status''] == 200 }}'
    then:
    - alias: Parse data
      variables:
        responsecontent: '{{ response_var[''content''] }}'
    else:
    - service: notify.notify
      data:
        title: Could not create an alarm triggered event for the Motion Sensors
        message: 'HTTP code: {{ response_var[''returncode''] }} and Status: {{ response_var[''status'']
          }}'
  mode: single
  description: ''
  icon: mdi:motion-sensor
demo_welcome_home:
  alias: 'DEMO: Welcome Home'
  sequence:
  - service: notify.alexa_media_carolyn_s_echo_show
    metadata: {}
    data:
      message: Welcome home ben
  description: ''
demo_dishwasher_is_done:
  alias: 'DEMO: Dishwasher is done'
  sequence:
  - service: tts.speak
    target:
      entity_id: tts.google_en_com
    data:
      cache: true
      media_player_entity_id: media_player.all_google_speakers_2
      message: the dishwasher is done
  description: ''
demo_food_delivery_notification:
  alias: 'DEMO: Food Delivery Notification'
  sequence:
  - service: notify.notify
    data:
      title: Person Detected At The Front Door
      message: Person Detected At The Front Door
      data:
        image: /media/local/snapshots/demopersonphoto.jpg
        actions:
        - action: SNOOZE
          title: Snooze Motion 1 hour
  description: ''
